<!-- room.ejs -->
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Room</title>
    <script>
      const ROOM_ID = "<%= roomId %>";
    </script>
    <link rel="stylesheet" href="/styles.css" />
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
      integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk"
      crossorigin="anonymous"
    />
    <script
      defer
      src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"
    ></script>
    <script src="/socket.io/socket.io.js" defer></script>
    <script src="script.js" defer></script>
    <script
      defer
      src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"
    ></script>
    <script
      src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
      integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
      integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
      crossorigin="anonymous"
    ></script>
    <script src="/socket.io/socket.io.js" defer></script>
    <link rel="stylesheet" href="style.css" />
    <script src="https://kit.fontawesome.com/c939d0e917.js"></script>
    <script src="https://cdn.socket.io/3.1.3/socket.io.js"></script>
    <script src="https://cdn.peerjs.com/1.3.2/peer.js"></script>

    <script src="script.js" defer></script>
    <style>
      #video-grid {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
      }
      video {
        height: 300px;
        width: 400px;
        object-fit: cover;
        padding: 8px;
      }
    </style>
  </head>
  <body>
    <div class="main">
      <div class="main__left">
        <div class="main__videos">
          <div id="video-grid"></div>
        </div>
        <div class="main__controls">
          <div class="main__controls__block">
            <div
              onclick="muteUnmute()"
              class="main__controls__button main__mute_button"
            >
              <i class="fas fa-microphone"></i>
              <span>Mute</span>
            </div>
            <div
              onclick="playStop()"
              class="main__controls__button main__video_button"
            >
              <i class="fas fa-video"></i>
              <span>Stop Video</span>
            </div>
          </div>
          <div class="main__controls__block">
            <div class="main__controls__button">
              <i class="fas fa-shield-alt"></i>
              <span>Security</span>
            </div>
            <div class="main__controls__button">
              <i class="fas fa-user-friends"></i>
              <span>Participants</span>
            </div>
            <div class="main__controls__button">
              <i class="fas fa-comment-alt"></i>
              <span>Chat</span>
            </div>
          </div>
          <div class="main__controls__block">
            <div class="main__controls__button">
              <span class="leave_meeting">Leave Meeting</span>
            </div>
          </div>
        </div>
      </div>
      <div class="main__right">
        <div class="main__header">
          <h6>Chat</h6>
        </div>
        <div class="main__chat_window">
          <ul class="messages"></ul>
        </div>
        <div class="main__message_container">
          <div id="chat-pane">
            <ul id="messages"></ul>
            <div id="chat-form">
              <input
                type="text"
                id="message-input"
                placeholder="Type your message..."
              />
              <button id="send-button">Send</button>
            </div>
          </div>
          <button id="send_chat"><i class="fas fa-paper-plane"></i></button>
        </div>
      </div>
    </div>

    <script>
      const socket = io("/");
      const roomId = "<%= roomId %>";
      let localStream; // Variable to store the local media stream

      // Your JavaScript code for the room

      // Function to get the user's media stream
      function getLocalStream() {
        return navigator.mediaDevices.getUserMedia({
          audio: true,
          video: true,
        });
      }

      // Example code for joining the room
      socket.emit("join-room", roomId);

      // Update the user list when received from the server
      socket.on("users-list", (users) => {
        const userList = document.getElementById("users");
        userList.innerHTML = users
          .map((user) => `<li>${user.userId}</li>`)
          .join("");
      });

      // Get the local media stream when the page loads
      window.addEventListener("load", () => {
        getLocalStream()
          .then((stream) => {
            localStream = stream; // Store the local media stream
            const videoElement = document.createElement("video");
            videoElement.srcObject = stream;
            videoElement.play();
            // Append the video element to the video grid
            const videoGrid = document.getElementById("video-grid");
            videoGrid.appendChild(videoElement);
          })
          .catch((error) => {
            console.error("Error accessing media devices:", error);
          });
      });

      // Function to get the audio track from the media stream
      function getAudioTrack() {
        const audioTracks = localStream.getAudioTracks();
        if (audioTracks.length > 0) {
          return audioTracks[0];
        }
        return null;
      }

      // Function to get the video track from the media stream
      function getVideoTrack() {
        const videoTracks = localStream.getVideoTracks();
        if (videoTracks.length > 0) {
          return videoTracks[0];
        }
        return null;
      }

      const muteUnmuteButton = document.querySelector(".main__mute_button");
      const stopVideoButton = document.querySelector(".main__video_button");
      const leaveMeetingButton = document.querySelector(".leave_meeting");

      muteUnmuteButton.addEventListener("click", () => {
        const isMuted = isAudioMuted();
        if (isMuted) {
          unmuteAudio();
          muteUnmuteButton.innerHTML = "Mute";
        } else {
          muteAudio();
          muteUnmuteButton.innerHTML = "Unmute";
        }
      });

      stopVideoButton.addEventListener("click", () => {
        const isVideoStopped = isVideoStopped();
        if (isVideoStopped) {
          startVideo();
          stopVideoButton.innerHTML = "Stop Video";
        } else {
          stopVideo();
          stopVideoButton.innerHTML = "Start Video";
        }
      });

      leaveMeetingButton.addEventListener("click", () => {
        // Close the media tracks and stop the local stream
        closeMediaTracks();
        localStream.getTracks().forEach((track) => track.stop());

        // Redirect the user to the homepage or any other desired page
        window.location.href = "/";
      });

      function isVideoStopped() {
        const videoTrack = getVideoTrack();
        const isStopped = videoTrack.enabled ? false : true;
        return isStopped;
      }

      function startVideo() {
        const videoTrack = getVideoTrack();
        videoTrack.enabled = true;
      }

      function stopVideo() {
        const videoTrack = getVideoTrack();
        videoTrack.enabled = false;
      }

      function isAudioMuted() {
        const audioTrack = getAudioTrack();
        const isMuted = audioTrack.enabled ? false : true;
        return isMuted;
      }

      function unmuteAudio() {
        const audioTrack = getAudioTrack();
        audioTrack.enabled = true;
      }

      function muteAudio() {
        const audioTrack = getAudioTrack();
        audioTrack.enabled = false;
      }

      function closeMediaTracks() {
        const audioTrack = getAudioTrack();
        const videoTrack = getVideoTrack();

        if (audioTrack) {
          audioTrack.stop();
        }

        if (videoTrack) {
          videoTrack.stop();
        }
      }

      // Other socket event handlers go here
      const messageForm = document.getElementById("chat-form");
      const messageInput = document.getElementById("message-input");
      const sendButton = document.getElementById("send-button");

      messageForm.addEventListener("submit", (event) => {
        event.preventDefault(); // Prevent form submission
        sendMessage();
      });

      sendButton.addEventListener("click", () => {
        sendMessage();
      });

      function sendMessage() {
        const message = messageInput.value;
        if (message.trim() !== "") {
          socket.emit("message", message);
          messageInput.value = "";
        }
      }
    </script>
  </body>
</html>
